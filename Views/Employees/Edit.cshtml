@model Cities_States.Models.Employee

@{
    ViewBag.Title = "Edit";
}

@if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ViewBag.ErrorMessage
    </div>
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

<style>
    /* Adjust label width to match the date of joining field */
    #dateOfExitGroup label {
        width: auto; /* Adjust as needed */
    }

    /* Ensure input field aligns properly with date of joining */
    #dateOfExitGroup .col-md-10 input[type="date"] {
        width: 100%;
    }

</style>
@using (Html.BeginForm("Edit", "Employees", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal" }))
{
    @Html.AntiForgeryToken()


    <div class="card">
        <div class="container mt-1">
            <div class="card-header" style="position: relative;">
                <a href="@Url.Action("Index")" class="btn btn-back" style="position: absolute; left: 10px; top: 50%; transform: translateY(-50%);">
                    <i class="material-icons">arrow_back</i>
                </a>
                <h2 class="card-title" style="color: #007bff; font-weight: bold; margin-bottom: 20px; text-align: center;">Edit Employee Details</h2>
            </div>
        </div>
        <div class="card-body">
            <nav>
                <div class="nav nav-tabs" id="nav-tab" role="tablist">
                    <a class="nav-item nav-link active" id="nav-personal-info-tab" data-toggle="tab" href="#nav-personal-info" role="tab" aria-controls="nav-personal-info" aria-selected="true">Personal Information</a>
                    <a class="nav-item nav-link" id="nav-details-tab" data-toggle="tab" href="#nav-details" role="tab" aria-controls="nav-details" aria-selected="false">Details</a>
                </div>
            </nav>


            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.EmployeeID)

            <div class="tab-content" id="nav-tabContent">
                <div class="tab-pane fade show active" id="nav-personal-info" role="tabpanel" aria-labelledby="nav-personal-info-tab">
                    <p></p>
                    <div class="form-group row">
                        @Html.LabelFor(model => model.FullName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.FathersName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.FathersName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FathersName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <select id="Designation" name="Designation" class="form-control">
                                <option value="">Select Designation</option>
                                <option value="Manager" @(Model.Designation == "Manager" ? "selected" : "")>Manager</option>
                                <option value="Developer" @(Model.Designation == "Developer" ? "selected" : "")>Developer</option>
                                <option value="Designer" @(Model.Designation == "Designer" ? "selected" : "")>Designer</option>
                                <option value="Tester" @(Model.Designation == "Tester" ? "selected" : "")>Tester</option>
                                <option value="Support" @(Model.Designation == "Support" ? "selected" : "")>Support</option>
                            </select>
                            @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="date" class="form-control" id="DateOfBirth" name="DateOfBirth" value="@Model.DateOfBirth.ToString("yyyy-MM-dd")" />
                            @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
                            <span id="ageValidation" class="text-danger" style="display: none;">Age must be at least 18 years old.</span>
                        </div>
                    </div>


                    <div class="form-group row">
                        @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <label class="radio-inline">
                                @Html.RadioButtonFor(model => model.Gender, "Male", new { id = "GenderMale" }) Male
                            </label>
                            <label class="radio-inline">
                                @Html.RadioButtonFor(model => model.Gender, "Female", new { id = "GenderFemale" }) Female
                            </label>
                            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.MaritalStatus, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.MaritalStatus, new List<SelectListItem>
                            {
                                new SelectListItem { Value = "", Text = "Select Marital Status" },
                                new SelectListItem { Value = "Single", Text = "Single" },
                                new SelectListItem { Value = "Married", Text = "Married" },
                                new SelectListItem { Value = "Divorced", Text = "Divorced" },
                                new SelectListItem { Value = "Widowed", Text = "Widowed" }
                            }, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.MaritalStatus, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        @Html.LabelFor(model => model.MobileNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">+91</span>
                                </div>
                                @Html.EditorFor(model => model.MobileNumber, new { htmlAttributes = new { @class = "form-control", pattern = "[0-9]{10}", oninput = "validateMobileNumber(this)", placeholder = "Format: 1234567890" } })
                            </div>
                            <span class="text-danger" id="mobileNumberError"></span>
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.EmergencyContactNumber, "Emergency Contact Number", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">+91</span>
                                </div>
                                @Html.EditorFor(model => model.EmergencyContactNumber, new { htmlAttributes = new { @class = "form-control", pattern = "[0-9]{10}", oninput = "validateEmergencyContactNumber(this)", placeholder = "Format: 1234567890" } })
                            </div>
                            <span class="text-danger" id="emergencyContactNumberError"></span>
                        </div>
                    </div>


                    <div class="form-group row">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <button type="button" class="btn btn-primary" id="nextButton">Next</button>

                </div>

                <div class="tab-pane fade" id="nav-details" role="tabpanel" aria-labelledby="nav-details-tab">
                    <p></p>
                    <div class="form-group row">
                        <label for="statusSelect" class="control-label col-md-2">Status</label>
                        <div class="col-md-10">
                            <select id="statusSelect" name="StatusSelect" class="form-control" onchange="toggleFields()">
                                <option value="">Select Status</option>
                                <option value="Transferred">Transferred</option>
                                <option value="Inactive">Inactive</option>
                            </select>
                        </div>
                    </div>

                    <div id="transferredFields" style="display: none;">
                        <div class="form-group row">
                            @Html.LabelFor(model => model.ClientName, new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.ClientName, ViewBag.Clients as SelectList, "Select Client", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ClientName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            @Html.LabelFor(model => model.ClientLocation, new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.ClientLocation, ViewBag.Locations as SelectList, "Select Location", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ClientLocation, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div id="dateOfExitGroup" class="form-group" style="display: none;">
                        @Html.LabelFor(model => model.DateOfExit,"Date of Exit" ,htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="date" class="form-control col-md-10" id="dateOfExit" name="DateOfExit" />
                            @Html.ValidationMessageFor(model => model.DateOfExit, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.DateOfJoining, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="date" id="DateOfJoining" name="DateOfJoining" class="form-control" value="@Model.DateOfJoining.ToString("yyyy-MM-dd")" />
                            @Html.ValidationMessageFor(model => model.DateOfJoining, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.DateOfDeployment, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="date" id="DateOfDeployment" name="DateOfDeployment" class="form-control" value="@Model.DateOfJoining.ToString("yyyy-MM-dd")" />
                            @Html.ValidationMessageFor(model => model.DateOfDeployment, "", new { @class = "text-danger" })
                        </div>
                    </div>


                    <div class="form-group row">
                        @Html.LabelFor(model => model.PAN, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="input-group">
                                @Html.EditorFor(model => model.PAN, new { htmlAttributes = new { @class = "form-control", pattern = "[A-Z]{5}[0-9]{4}[A-Z]{1}" } })
                                <span class="input-group-text text-muted">Format: ABCDE1234F</span>
                            </div>
                            @Html.ValidationMessageFor(model => model.PAN, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.Aadhar, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="input-group">
                                @Html.EditorFor(model => model.Aadhar, new { htmlAttributes = new { @class = "form-control", pattern = "[0-9]{12}", required = "required" } })
                                <span class="input-group-text text-muted">Format: 123456789012</span>
                            </div>
                            @Html.ValidationMessageFor(model => model.Aadhar, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        @Html.LabelFor(model => model.UAN, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.UAN, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.UAN, "", new { @class = "text-danger" })
                            <span class="text-warning">Submission of UAN may become mandatory in the future. Please ensure its accuracy.</span>
                        </div>
                    </div>


                    <div class="form-group row">
                        @Html.LabelFor(model => model.PFNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.PFNumber, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PFNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.SalaryBelow21K, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="form-check">
                                @Html.EditorFor(model => model.SalaryBelow21K, new { htmlAttributes = new { @class = "form-check-input", id = "chkSalaryBelow21K" } })
                                @Html.ValidationMessageFor(model => model.SalaryBelow21K, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div id="esiNumberField" class="form-group row" style="display: none;">
                        @Html.LabelFor(model => model.ESINumber, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ESINumber, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ESINumber, "", new { @class = "text-danger" })
                            <span id="esiNumberWarning" class="text-warning" style="display: none;">Reminder: Generate ESI IP Number Within 10 Days. Please remember to generate the ESI IP number within 10 days of an employee joining to ensure compliance.</span>
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.BankAccountNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.BankAccountNumber, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.BankAccountNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.IFSC, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.IFSC, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.IFSC, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.ClientID, "Client", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("ClientID", (SelectList)ViewBag.ClientID, "Select Client", htmlAttributes: new { @class = "form-control", @id = "ClientID" })
                            @Html.ValidationMessageFor(model => model.ClientID, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <!-- Branch Code Dropdown -->
                    <div class="form-group row">
                        @Html.LabelFor(model => model.BranchCode, "Branch Code", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("BranchCode", new SelectList(Enumerable.Empty<SelectListItem>()), htmlAttributes: new { @class = "form-control", @id = "BranchCode" })
                            @Html.ValidationMessageFor(model => model.BranchCode, "", new { @class = "text-danger" })
                        </div>
                    </div>



                    @Html.HiddenFor(model => model.Photograph) <!-- Hidden field to retain existing image path -->

                    <div class="form-group row">
                        @Html.LabelFor(model => model.Photograph, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @if (!string.IsNullOrEmpty(Model.Photograph))
                            {
                                <img src="@Url.Content(Model.Photograph)" alt="Employee Photograph" style="max-width: 200px;" />
                                <br />
                                <span>@System.IO.Path.GetFileName(Model.Photograph)</span> <!-- Display the image file name -->
                            }
                            <input type="file" name="Photograph" id="Photograph" class="form-control" />
                            @Html.ValidationMessageFor(model => model.Photograph, "", new { @class = "text-danger" })
                        </div>
                    </div>


                    <div class="form-group row">
                        <div class="col-md-10 offset-md-2 d-flex justify-content-start">
                            <button type="button" class="btn btn-secondary" id="previousButton">Previous</button>
                            <input type="submit" value="Create" class="btn btn-primary ml-2" id="submitButton" />
                        </div>
                    </div>

                </div>


            </div>


            



            @*<div class="form-group row">
            @Html.LabelFor(model => model.InactiveStatus, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="checkbox" id="inactiveStatus" name="InactiveStatus" onclick="toggleDateOfExit()">
            </div>
        </div>

        <div class="form-group row" id="dateOfExitGroup" style="display: none;">
            <div class="col-md-2">
                @Html.LabelFor(model => model.DateOfExit, "Date of Exit", htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-10">
                <input type="date" class="form-control" id="dateOfExit" name="DateOfExit" />
                @Html.ValidationMessageFor(model => model.DateOfExit, "", new { @class = "text-danger" })
            </div>
        </div>*@

           
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>





<script>
    function validateEmergencyContactNumber(input) {
        var emergencyContactNumber = input.value;
        var isValid = /^\d{10}$/.test(emergencyContactNumber);
        var errorSpan = document.getElementById("emergencyContactNumberError");
        var hintSpan = document.getElementById("emergencyContactNumberHint");

        if (!isValid) {
            errorSpan.textContent = "Emergency contact number must be 10 digits.";
            input.setCustomValidity("Invalid emergency contact number");
            input.classList.add("is-invalid");
            input.classList.remove("is-valid");
        } else {
            errorSpan.textContent = "";
            input.setCustomValidity("");
            input.classList.remove("is-invalid");
            input.classList.add("is-valid");
        }

        if (emergencyContactNumber.length === 0) {
            hintSpan.textContent = "Emergency contact number is required.";
        } else {
            hintSpan.textContent = "Format: 1234567890";
        }
    }
    function validateMobileNumber(input) {
        var mobileNumber = input.value;
        var isValid = /^\d{10}$/.test(mobileNumber);
        var errorSpan = document.getElementById("mobileNumberError");
        var hintSpan = document.getElementById("mobileNumberHint");

        if (!isValid) {
            errorSpan.textContent = "Mobile number must be 10 digits.";
            input.setCustomValidity("Invalid mobile number");
            input.classList.add("is-invalid");
            input.classList.remove("is-valid");
        } else {
            errorSpan.textContent = "";
            input.setCustomValidity("");
            input.classList.remove("is-invalid");
            input.classList.add("is-valid");
        }

        if (mobileNumber.length === 0) {
            hintSpan.textContent = "Mobile number is required.";
        } else {
            hintSpan.textContent = "Format: 1234567890";
        }
    }
    $(function () {
        // Validate age when Date of Birth is changed
        $("#DateOfBirth").change(function () {
            // Calculate age based on Date of Birth
            var dob = new Date($(this).val());
            var today = new Date();
            var age = today.getFullYear() - dob.getFullYear();
            var m = today.getMonth() - dob.getMonth();
            if (m < 0 || (m === 0 && today.getDate() < dob.getDate())) {
                age--;
            }

            // Validate age
            if (age < 18) {
                $("#ageValidation").show();
            } else {
                $("#ageValidation").hide();
            }
        });

        // Prevent form submission if age is less than 18
        $("form").submit(function () {
            // Calculate age based on Date of Birth
            var dob = new Date($("#DateOfBirth").val());
            var today = new Date();
            var age = today.getFullYear() - dob.getFullYear();
            var m = today.getMonth() - dob.getMonth();
            if (m < 0 || (m === 0 && today.getDate() < dob.getDate())) {
                age--;
            }

            // Prevent form submission if age is less than 18
            if (age < 18) {
                $("#ageValidation").show();
                return false; // Prevent form submission
            } else {
                $("#ageValidation").hide();
                return true; // Allow form submission
            }
        });
    });
</script>
<script>
    $(document).ready(function () {
        // Handle SalaryBelow21K checkbox change event
        $("#chkSalaryBelow21K").change(function () {
            if ($(this).is(":checked")) {
                $("#esiNumberField").show();
            } else {
                $("#esiNumberField").hide();
                // Hide warning message when checkbox is unchecked
                $("#esiNumberWarning").hide();
            }
        });

        // Show warning message when ESINumber field is focused
        $("#ESINumber").focus(function () {
            $("#esiNumberWarning").show();
        });

    });
</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        function toggleFields() {
            var statusSelect = document.getElementById("statusSelect").value;
            var transferredFields = document.getElementById("transferredFields");
            var dateOfExitGroup = document.getElementById("dateOfExitGroup");

            if (statusSelect === "Transferred") {
                transferredFields.style.display = "block";
                dateOfExitGroup.style.display = "none";
            } else if (statusSelect === "Inactive") {
                transferredFields.style.display = "none";
                dateOfExitGroup.style.display = "block";
            } else {
                transferredFields.style.display = "none";
                dateOfExitGroup.style.display = "none";
            }
        }
    </script>
    <script type="text/javascript">
        function validateFile() {
            var fileInput = document.getElementById('Photograph');
            var filePath = fileInput.value;
            var allowedExtensions = /(\.jpg|\.jpeg|\.png)$/i;
            var maxSize = 2 * 1024 * 1024; // 2MB

            if (!allowedExtensions.exec(filePath)) {
                alert('Please upload file having extensions .jpeg/.jpg/.png only.');
                fileInput.value = '';
                return false;
            } else if (fileInput.files[0].size > maxSize) {
                alert('File size must be less than 2MB.');
                fileInput.value = '';
                return false;
            }
            return true;
        }

        document.getElementById('Photograph').addEventListener('change', validateFile);
    </script>
    <script>
    $(document).ready(function () {
        $('#ClientID').change(function () {
            var clientId = $(this).val();
            if (clientId) {
                $.ajax({
                    url: '@Url.Action("GetBranchCodes", "Employees")',
                    type: 'GET',
                    data: { clientId: clientId },
                    success: function (data) {
                        var branchCodeDropdown = $('#BranchCode');
                        branchCodeDropdown.empty();
                        $.each(data, function (index, branchCode) {
                            branchCodeDropdown.append($('<option/>', {
                                value: branchCode.Value,
                                text: branchCode.Text
                            }));
                        });
                    },
                    error: function () {
                        alert('Error fetching branch codes.');
                    }
                });
            } else {
                // Clear branch codes dropdown if "Select Client" is chosen
                $('#BranchCode').empty();
                $('#BranchCode').append($('<option>').text('Select Branch Code').attr('value', ''));
            }
        });

        // Trigger change event if ClientID has a value to load BranchCodes on page load
        var selectedClientId = $('#ClientID').val();
        if (selectedClientId) {
            $('#ClientID').change();
        }
        $('#nextButton').click(function () {
            $('#nav-personal-info-tab').removeClass('active');
            $('#nav-personal-info').removeClass('show active');
            $('#nav-details-tab').addClass('active');
            $('#nav-details').addClass('show active');
        });

        $('#previousButton').click(function () {
            $('#nav-details-tab').removeClass('active');
            $('#nav-details').removeClass('show active');
            $('#nav-personal-info-tab').addClass('active');
            $('#nav-personal-info').addClass('show active');
        });
        $('#nextButton').click(function () {
            $('#nav-details-tab').tab('show');
        });

        $('#previousButton').click(function () {
            $('#nav-personal-info-tab').tab('show');
        });
        $('#nav-personal-info-tab').click(function () {
            $('#nav-details-tab').removeClass('active');
            $('#nav-details').removeClass('show active');
            $('#nav-personal-info-tab').addClass('active');
            $('#nav-personal-info').addClass('show active');
        });

        $('#nav-details-tab').click(function () {
            $('#nav-personal-info-tab').removeClass('active');
            $('#nav-personal-info').removeClass('show active');
            $('#nav-details-tab').addClass('active');
            $('#nav-details').addClass('show active');
        });
    });
    </script>
    <script>
        function toggleDateOfExit() {
            var checkbox = document.getElementById("inactiveStatus");
            var dateOfExitGroup = document.getElementById("dateOfExitGroup");
            if (checkbox.checked) {
                dateOfExitGroup.style.display = "block";
            } else {
                dateOfExitGroup.style.display = "none";
            }
        }
    </script>
}
