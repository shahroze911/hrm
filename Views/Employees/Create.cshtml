@model Cities_States.Models.Employee

@{
    ViewBag.Title = "Create";
}
@if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ViewBag.CreateError
    </div>
}
<!DOCTYPE html>
<html>
<head>
    <title>@ViewBag.Title</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" integrity="sha384-k6RqeWeci5ZR/Lv4MR0sA0FfDOMZZ2urO5e6r6rmvI3OG+dHJ1iNSC1TAdf5ATz5" crossorigin="anonymous">

    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <style>
        /* Custom styles for the form */
        body {
            background-color: #f8f9fa; /* Set a light background color */
        }

        .container {
            background-color: #ffffff; /* Set a white background color for the form container */
            border-radius: 10px; /* Add some border radius for a rounded appearance */
            padding: 30px; /* Add some padding for spacing */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Add a subtle shadow for depth */
        }

        h2 {
            color: #007bff; /* Set a blue color for the heading */
        }

        .form-group {
            margin-bottom: 20px; /* Add some margin between form groups */
        }

        label {
            font-weight: bold; /* Make labels bold */
        }

        input[type="text"],
        input[type="date"],
        input[type="email"],
        select {
            width: 100%; /* Make input fields and select boxes full width */
            padding: 10px; /* Add some padding for better appearance */
            border-radius: 5px; /* Add some border radius for a rounded appearance */
            border: 1px solid #ced4da; /* Add a light border */
            transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out; /* Add smooth transition for better interaction */
        }

            input[type="text"]:focus,
            input[type="date"]:focus,
            input[type="email"]:focus,
            select:focus {
                outline: none; /* Remove default focus outline */
                border-color: #80bdff; /* Change border color on focus */
                box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); /* Add a subtle shadow on focus */
            }

        .btn-primary {
            background-color: #007bff; /* Set a blue background color for primary buttons */
            border-color: #007bff; /* Set border color same as background color */
        }

            .btn-primary:hover {
                background-color: #0056b3; /* Darken background color on hover */
                border-color: #0056b3; /* Darken border color on hover */
            }

        .text-danger {
            color: #dc3545; /* Set a red color for error messages */
        }

        /* Responsive styles */

    </style>
</head>
<body>

    <div class="container mt-1">
        <h2 class="text-center mb-1">Create Employee</h2>

        @using (Html.BeginForm("Create", "Employees", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.EmployeeID)

                @*<div class="form-group row">
                        @Html.LabelFor(model => model.EmployeeID, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="text" class="form-control" value="@Model.EmployeeID" readonly />
                        </div>
                    </div>*@


                <div class="form-group row">
                    @Html.LabelFor(model => model.FullName, "Full Name", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                        @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.FathersName, "Father/Husband Name", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FathersName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FathersName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <select id="Designation" name="Designation" class="form-control">
                            <option value="">Select Designation</option>
                            <option value="Manager">Manager</option>
                            <option value="Developer">Developer</option>
                            <option value="Designer">Designer</option>
                            <option value="Tester">Tester</option>
                            <option value="Support">Support</option>
                        </select>
                        @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.MaritalStatus, "Marital Status", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <select id="MaritalStatus" name="MaritalStatus" class="form-control">
                            <option value="">Select Marital Status</option>
                            <option value="Single">Single</option>
                            <option value="Married">Married</option>
                            <option value="Divorced">Divorced</option>
                            <option value="Widowed">Widowed</option>
                        </select>
                        @Html.ValidationMessageFor(model => model.MaritalStatus, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group row">
                    @Html.LabelFor(model => model.DateOfBirth, "Date of Birth", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input type="date" class="form-control" id="DateOfBirth" name="DateOfBirth" />
                        @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
                        <span id="ageValidation" class="text-danger" style="display: none;">Age must be at least 18 years old.</span>
                    </div>
                </div>



                <div class="form-group row">
                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <label class="radio-inline">
                            @Html.RadioButtonFor(model => model.Gender, "Male", new { htmlAttributes = new { @class = "form-control" } }) Male
                        </label>
                        <label class="radio-inline">
                            @Html.RadioButtonFor(model => model.Gender, "Female", new { htmlAttributes = new { @class = "form-control" } }) Female
                        </label>
                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group row">
                    @Html.LabelFor(model => model.PAN, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.PAN, new { htmlAttributes = new { @class = "form-control", pattern = "[A-Z]{5}[0-9]{4}[A-Z]{1}" } })
                        <span class="text-muted">Format: ABCDE1234F</span>
                        @Html.ValidationMessageFor(model => model.PAN, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group row">
                    @Html.LabelFor(model => model.Aadhar, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Aadhar, new { htmlAttributes = new { @class = "form-control", pattern = "[0-9]{12}", required = "required" } })
                        <span class="text-muted">Format: 123456789012</span>
                        @Html.ValidationMessageFor(model => model.Aadhar, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.MobileNumber, "Mobile Number", htmlAttributes: new { @class = "control-label col-md-2" })

                    <div class="col-md-10">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text">+91</span>
                            </div>
                            @Html.EditorFor(model => model.MobileNumber, new { htmlAttributes = new { @class = "form-control", pattern = "[0-9]{10}", oninput = "validateMobileNumber(this)", placeholder = "Format: 1234567890" } })
                        </div>
                        <span class="text-danger" id="mobileNumberError"></span>
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.EmergencyContactNumber, "Emergency Contact Number", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text">+91</span>
                            </div>
                            @Html.EditorFor(model => model.EmergencyContactNumber, new { htmlAttributes = new { @class = "form-control", pattern = "[0-9]{10}", oninput = "validateEmergencyContactNumber(this)", placeholder = "Format: 1234567890" } })
                        </div>
                        <span class="text-danger" id="emergencyContactNumberError"></span>
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", type = "email" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.Label("State", "State", new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.DropDownList("State", ViewBag.States as SelectList, "Select State", new { @id = "state", @class = "form-control" })
                    </div>
                    @Html.Label("District", "District", new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.DropDownList("District", new SelectList(Enumerable.Empty<SelectListItem>(), "Value", "Text"), "Select District", new { @id = "district", @class = "form-control" })
                    </div>
                </div>




                <div class="form-group row">
                    @Html.LabelFor(model => model.DateOfJoining, "Date of joining", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input type="date" id="DateOfJoining" name="DateOfJoining" class="form-control" />
                        @Html.ValidationMessageFor(model => model.DateOfJoining, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group row">
                    @Html.LabelFor(model => model.UAN, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.UAN, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.UAN, "", new { @class = "text-danger" })
                        <span class="text-warning">Submission of UAN may become mandatory in the future. Please ensure its accuracy.</span>
                    </div>
                </div>


                <div class="form-group row">
                    @Html.LabelFor(model => model.PFNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.PFNumber, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PFNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.SalaryBelow21K, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="form-check">
                            @Html.EditorFor(model => model.SalaryBelow21K, new { htmlAttributes = new { @class = "form-check-input", id = "chkSalaryBelow21K" } })
                            @Html.ValidationMessageFor(model => model.SalaryBelow21K, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div id="esiNumberField" class="form-group row" style="display: none;">
                    @Html.LabelFor(model => model.ESINumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ESINumber, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ESINumber, "", new { @class = "text-danger" })
                        <span id="esiNumberWarning" class="text-warning" style="display: none;">Reminder: Generate ESI IP Number Within 10 Days. Please remember to generate the ESI IP number within 10 days of an employee joining to ensure compliance.</span>
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.BankAccountNumber, "Bank Account Number", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.BankAccountNumber, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.BankAccountNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.IFSC, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.IFSC, new { htmlAttributes = new { @class = "form-control", pattern = "[A-Z]{4}[0-9]{7}", title = "Enter a valid IFSC code (Example: ABCD0123456)", maxlength = 11, minlength = 11 } })
                        @Html.ValidationMessageFor(model => model.IFSC, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group row">
                    @Html.LabelFor(model => model.ClientID, "Client", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("ClientID", (SelectList)ViewBag.ClientID, htmlAttributes: new { @class = "form-control", @id = "ClientID" })
                        @Html.ValidationMessageFor(model => model.ClientID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.BranchCode, "Branch Code", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("BranchCode", new SelectList(Enumerable.Empty<SelectListItem>()), htmlAttributes: new { @class = "form-control", @id = "BranchCode" })
                        @Html.ValidationMessageFor(model => model.BranchCode, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    @Html.LabelFor(model => model.DateOfDeployment, "Date of Deployment", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.DateOfDeployment, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                        @Html.ValidationMessageFor(model => model.DateOfDeployment, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group row">
                    @Html.Label("Photograph", new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input type="file" name="Photograph" id="Photograph" class="form-control" />
                        @Html.ValidationMessageFor(model => model.Photograph, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group row">
                    <div class="col-md-10 offset-md-2">
                        <input type="submit" value="Create" class="btn btn-primary" id="submitButton" />
                    </div>
                </div>
            </div>
            <input type="hidden" id="generateLetter" name="GenerateLetter" value="false" />
        }

        <div class="text-left mt-3">
            <a href="@Url.Action("Index", "Employees")" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back
            </a>
        </div>
    </div>


</body>

</html>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script>
    $(document).ready(function () {
        $('#submitButton').click(function (event) {
            // Prevent default form submission
            event.preventDefault();

            // Check if any required fields are empty
            var isValid = true;
            $('input[required], select[required]').each(function () {
                if (!$(this).val()) {
                    isValid = false;
                    return false; // Exit the loop early if any required field is empty
                }
            });

            // If any required field is empty, display an alert and stop further execution
            if (!isValid) {
                alert('Please fill in all required fields.');
                return;
            }

            // Check if the user wants to generate an appointment order
            if (confirm("Would you like to generate an appointment order for this employee?")) {
                $('#generateLetter').val('true');
                // Set a hidden input to indicate the action
                $('#action').val('index');
            } else {
                $('#generateLetter').val('false');
                // Set a hidden input to indicate the action
                $('#action').val('');
            }

            // Submit the form
            $('form').submit();
        });
    });
</script>



<script type="text/javascript">
    function validateFile() {
        var fileInput = document.getElementById('Photograph');
        var filePath = fileInput.value;
        var allowedExtensions = /(\.jpg|\.jpeg|\.png)$/i;
        var maxSize = 2 * 1024 * 1024; // 2MB

        if (!allowedExtensions.exec(filePath)) {
            alert('Please upload file having extensions .jpeg/.jpg/.png only.');
            fileInput.value = '';
            return false;
        } else if (fileInput.files[0].size > maxSize) {
            alert('File size must be less than 2MB.');
            fileInput.value = '';
            return false;
        }
        return true;
    }

    document.getElementById('Photograph').addEventListener('change', validateFile);
</script>


<script>

    function validateEmergencyContactNumber(input) {
        var emergencyContactNumber = input.value;
        var isValid = /^\d{10}$/.test(emergencyContactNumber);
        var errorSpan = document.getElementById("emergencyContactNumberError");
        var hintSpan = document.getElementById("emergencyContactNumberHint");

        if (!isValid) {
            errorSpan.textContent = "Emergency contact number must be 10 digits.";
            input.setCustomValidity("Invalid emergency contact number");
            input.classList.add("is-invalid");
            input.classList.remove("is-valid");
        } else {
            errorSpan.textContent = "";
            input.setCustomValidity("");
            input.classList.remove("is-invalid");
            input.classList.add("is-valid");
        }

        if (emergencyContactNumber.length === 0) {
            hintSpan.textContent = "Emergency contact number is required.";
        } else {
            hintSpan.textContent = "Format: 1234567890";
        }
    }
    function validateMobileNumber(input) {
        var mobileNumber = input.value;
        var isValid = /^\d{10}$/.test(mobileNumber);
        var errorSpan = document.getElementById("mobileNumberError");
        var hintSpan = document.getElementById("mobileNumberHint");

        if (!isValid) {
            errorSpan.textContent = "Mobile number must be 10 digits.";
            input.setCustomValidity("Invalid mobile number");
            input.classList.add("is-invalid");
            input.classList.remove("is-valid");
        } else {
            errorSpan.textContent = "";
            input.setCustomValidity("");
            input.classList.remove("is-invalid");
            input.classList.add("is-valid");
        }

        if (mobileNumber.length === 0) {
            hintSpan.textContent = "Mobile number is required.";
        } else {
            hintSpan.textContent = "Format: 1234567890";
        }
    }
    $(function () {
        // Validate age when Date of Birth is changed
        $("#DateOfBirth").change(function () {
            // Calculate age based on Date of Birth
            var dob = new Date($(this).val());
            var today = new Date();
            var age = today.getFullYear() - dob.getFullYear();
            var m = today.getMonth() - dob.getMonth();
            if (m < 0 || (m === 0 && today.getDate() < dob.getDate())) {
                age--;
            }

            // Validate age
            if (age < 18) {
                $("#ageValidation").show();
            } else {
                $("#ageValidation").hide();
            }
        });

        // Prevent form submission if age is less than 18
        $("form").submit(function () {
            // Calculate age based on Date of Birth
            var dob = new Date($("#DateOfBirth").val());
            var today = new Date();
            var age = today.getFullYear() - dob.getFullYear();
            var m = today.getMonth() - dob.getMonth();
            if (m < 0 || (m === 0 && today.getDate() < dob.getDate())) {
                age--;
            }

            // Prevent form submission if age is less than 18
            if (age < 18) {
                $("#ageValidation").show();
                return false; // Prevent form submission
            } else {
                $("#ageValidation").hide();
                return true; // Allow form submission
            }
        });
    });
</script>
@section Scripts {
    <script>
        $(document).ready(function () {
            $('#ClientID').change(function () {
                var clientId = $(this).val();
                $.ajax({
                    url: '@Url.Action("GetBranchCodes", "Employees")',
                    type: 'GET',
                    data: { clientId: clientId },
                    success: function (data) {
                        $('#BranchCode').val(data);
                    },
                    error: function () {
                        alert('Error fetching branch codes.');
                    }
                });
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            $("#state").change(function () {
                var stateId = $(this).val();
                if (stateId !== "") {
                    // Fetch districts based on the selected state using AJAX
                    $.ajax({
                        url: '@Url.Action("GetDistrictsByState", "Employees")',
                        type: 'GET',
                        data: { stateId: stateId },
                        success: function (result) {
                            var districtDropdown = $("#district");
                            districtDropdown.empty();
                            districtDropdown.append('<option value="">Select District</option>');
                            $.each(result, function (index, district) {
                                districtDropdown.append($('<option></option>').val(district.DistrictID).text(district.DistrictName));
                            });
                        }
                    });
                } else {
                    // If no state is selected, clear the district dropdown
                    $("#district").empty().append('<option value="">Select District</option>');
                }
            });
        });

    </script>
    <script>
        $(document).ready(function () {
            // Handle SalaryBelow21K checkbox change event
            $("#chkSalaryBelow21K").change(function () {
                if ($(this).is(":checked")) {
                    $("#esiNumberField").show();
                } else {
                    $("#esiNumberField").hide();
                    // Hide warning message when checkbox is unchecked
                    $("#esiNumberWarning").hide();
                }
            });

            // Show warning message when ESINumber field is focused
            $("#ESINumber").focus(function () {
                $("#esiNumberWarning").show();
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            $('#ClientID').change(function () {
                var clientId = $(this).val();
                $.ajax({
                    url: '@Url.Action("GetBranchCodes", "Employees")',
                    type: 'GET',
                    data: { clientId: clientId },
                    success: function (data) {
                        var branchCodeDropdown = $('#BranchCode');
                        branchCodeDropdown.empty();
                        $.each(data, function (index, branchCode) {
                            branchCodeDropdown.append($('<option/>', {
                                value: branchCode.Value,
                                text: branchCode.Text
                            }));
                        });
                    },
                    error: function () {
                        alert('Error fetching branch codes.');
                    }
                });
            });
        });
    </script>
}